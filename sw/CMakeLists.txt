cmake_minimum_required(VERSION 3.2)

cmake_policy(SET CMP0057 NEW)
cmake_policy(SET CMP0076 NEW)

message("CMAKE_SYSTEM_PROCESSOR  = ${CMAKE_SYSTEM_PROCESSOR}")
message("CMAKE_SYSROOT           = ${CMAKE_SYSROOT}")
message("CMAKE_TOOLCHAIN_FILE    = ${CMAKE_TOOLCHAIN_FILE}")
message("CMAKE_C_COMPILER        = ${CMAKE_C_COMPILER}")

set(CMAKE_INCLUDE_CURRENT_DIR ON)

if(STM32_CUBE_MP1_PATH)
   set(MCU ON)
   unset(MPU)
   unset(X86)
   message("Build for MCU")
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "arm|ARM")
   unset(MCU)
   set(MPU ON)
   unset(X86)
   message("Build for MPU")
endif()

if(MCU)
   set(STM32_CUBE_PATH "${STM32_CUBE_MP1_PATH}")
   set(STM32)
   set(STM32_FAMILY "STM32MP1")
   find_package(CMSIS   COMPONENTS STM32MP157AA)
   find_package(HAL     COMPONENTS STM32MP1 REQUIRED)
   add_compile_definitions(CORE_CM4)
   message("Add ENVIRONMENT for MCU")
endif()
message("STM32_FAMILY = ${STM32_FAMILY}")

# -Wpedantic we cant use because of warning: ISO C++11 requires at least one argument for the "..." in a variadic macro
set(CMAKE_C_CXX_COMMON_FLAGS  "${CMAKE_C_CXX_COMMON_FLAGS} -Wall -Wextra -Werror -Wno-unused-variable -Wno-unused-parameter")
IF(NOT MCU)
   set(CMAKE_C_CXX_COMMON_FLAGS  "${CMAKE_C_CXX_COMMON_FLAGS} -fpic")
ENDIF()
set(LTO_OPTS " -flto -ffat-lto-objects -fuse-linker-plugin")
set(FAST_OPTS "-O2 -funroll-loops")
set(SAVE_STACK_OPTS "-fno-omit-frame-pointer -fno-shrink-wrap -fno-conserve-stack -fno-defer-pop -fno-ira-share-save-slots -fno-ira-share-spill-slots -fno-combine-stack-adjustments")

set(CMAKE_CXX17_STANDARD_COMPILE_OPTION -std=c++1z )
set(CMAKE_CXX17_EXTENSION_COMPILE_OPTION -std=gnu++1z )
set(CMAKE_CXX17_COMPILE_FEATURES cxx_std_17 )
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_FLAGS                "${CMAKE_CXX_FLAGS} ${CMAKE_C_CXX_COMMON_FLAGS}")
set(CMAKE_CXX_FLAGS_DEBUG          "${CMAKE_CXX_FLAGS_DEBUG} -O0 -g")
set(CMAKE_CXX_FLAGS_RELEASE        "${CMAKE_CXX_FLAGS_RELEASE} -DNDEBUG ${FAST_OPTS} ${LTO_OPTS} -s")
set(CMAKE_CXX_FLAGS_LIGHTWEIGHT    "${CMAKE_CXX_FLAGS_LIGHTWEIGHT} -DNDEBUG ${FAST_OPTS} -s")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -g ${FAST_OPTS} ${LTO_OPTS} ${SAVE_STACK_OPTS}")
set(CMAKE_SHARED_LINKER_FLAGS      "${CMAKE_SHARED_LINKER_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS         "${CMAKE_EXE_LINKER_FLAGS}")
set(CMAKE_C_FLAGS                  "${CMAKE_C_FLAGS} ${CMAKE_C_CXX_COMMON_FLAGS}")

include_directories(AFTER . overall)
IF(MCU)
   message("Add compile flags for MCU")
   set(STM32_FLAGS "${STM32_FLAGS} -mcpu=cortex-m4 -mfpu=fpv4-sp-d16 -mfloat-abi=hard -mthumb -mabi=aapcs")
   set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${STM32_FLAGS}")
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${STM32_FLAGS} -fconserve-stack -fno-rtti -fno-exceptions -fno-threadsafe-statics -Wnoexcept")
ENDIF()

IF(X86 OR MPU)
   set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=gold") #see https://en.wikipedia.org/wiki/Gold_(linker)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fuse-ld=gold")

   add_subdirectory( mpu )
ENDIF()

add_subdirectory( mcu )
